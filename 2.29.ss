; a)
(define (make-mobile left right)
  (list left right))

(define (make-branch length structure)
  (list length structure))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cdar branch))

(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cdar mobile))

(define (branch-weight branch)
  (if (pair? branch)
      (+ (branch-weight (left-branch branch))
         (branch-weight (right-branch branch)))
      (branch-structure branch)))
; b)
(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))
; c)
(define (balance? mobile)
  (and (= (* (branch-length (left-branch mobile))
             (branch-weight (left-branch mobile)))
          (* (branch-length (right-branch mobile))
             (branch-weight (right-branch mobile))))
       (map (lambda (x)
              (if (pair? x)
                  (balance? x)))
            mobile)))
  